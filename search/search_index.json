{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lost Cities Lost Cities is a card game in the Kosmos two-player series. The game originally consisted of a single deck of cards of rank 2\u201310 in five different colors with three special \"handshakes\" (\"HS\" in scoring examples below) in each suit, but as of 2019 the game now includes six colored suits, with the sixth color being optional for gameplay. A game board is included to organize discarded cards and help players organize their card collections. The object of the game is to gain points by mounting profitable archaeological expeditions to the different sites represented by the colored suits of cards. On a player's turn, they must first play one card, either to an expedition or by discarding it to the color-appropriate discard pile, then draw one card, either from the deck or from the top of a discard pile. Cards played to expeditions must be in ascending order, but they need not be consecutive. Handshakes are considered lower than a 2 and represent investments in an expedition. Thus, if you play a red 4, you may play any other red card higher than a 4 on a future turn but may no longer play a handshake, the 2, or the 3. The game continues in this fashion with players alternating turns until the final card is taken from the deck. The rest of the cards in hand are then discarded and players score their expeditions. Each expedition that has at least one card played into it must be scored. Cards played into an expedition are worth their rank in points, and handshakes count as a multiplier against your final total; one handshake doubles an expedition's value, while two handshakes triples that value and three handshakes quadruple it. Expeditions start at a value of -20, so you must play at least 20 points of cards into an expedition in order to make a profit. If you are left with a negative value and have a handshake, the multiplier still applies. A 20-point bonus is awarded to every expedition with at least eight cards played into it. A complete game of Lost Cities lasts three matches, with scores for each match being added together. Scoring example 1: An expedition has a 2,3,7,8,10 for a total of 30. This expedition is worth 10 total points: 30 plus the initial -20. Scoring example 2: An expedition has 2 HS, and 4,5,6,7,8,10 for a total of 40. This expedition is worth 80 total points: 40 points for cards, plus the initial -20, \u00d73 for the two multipliers, plus the 20-pt bonus for playing 8+ cards. Scoring example 3: An expedition has 1 HS, and 4,6,7 for a total of 17. This expedition is worth -6 total points: 17 plus the initial -20, \u00d72 for the multiplier.","title":"Description"},{"location":"#lost-cities","text":"Lost Cities is a card game in the Kosmos two-player series. The game originally consisted of a single deck of cards of rank 2\u201310 in five different colors with three special \"handshakes\" (\"HS\" in scoring examples below) in each suit, but as of 2019 the game now includes six colored suits, with the sixth color being optional for gameplay. A game board is included to organize discarded cards and help players organize their card collections. The object of the game is to gain points by mounting profitable archaeological expeditions to the different sites represented by the colored suits of cards. On a player's turn, they must first play one card, either to an expedition or by discarding it to the color-appropriate discard pile, then draw one card, either from the deck or from the top of a discard pile. Cards played to expeditions must be in ascending order, but they need not be consecutive. Handshakes are considered lower than a 2 and represent investments in an expedition. Thus, if you play a red 4, you may play any other red card higher than a 4 on a future turn but may no longer play a handshake, the 2, or the 3. The game continues in this fashion with players alternating turns until the final card is taken from the deck. The rest of the cards in hand are then discarded and players score their expeditions. Each expedition that has at least one card played into it must be scored. Cards played into an expedition are worth their rank in points, and handshakes count as a multiplier against your final total; one handshake doubles an expedition's value, while two handshakes triples that value and three handshakes quadruple it. Expeditions start at a value of -20, so you must play at least 20 points of cards into an expedition in order to make a profit. If you are left with a negative value and have a handshake, the multiplier still applies. A 20-point bonus is awarded to every expedition with at least eight cards played into it. A complete game of Lost Cities lasts three matches, with scores for each match being added together. Scoring example 1: An expedition has a 2,3,7,8,10 for a total of 30. This expedition is worth 10 total points: 30 plus the initial -20. Scoring example 2: An expedition has 2 HS, and 4,5,6,7,8,10 for a total of 40. This expedition is worth 80 total points: 40 points for cards, plus the initial -20, \u00d73 for the two multipliers, plus the 20-pt bonus for playing 8+ cards. Scoring example 3: An expedition has 1 HS, and 4,6,7 for a total of 17. This expedition is worth -6 total points: 17 plus the initial -20, \u00d72 for the multiplier.","title":"Lost Cities"},{"location":"activity_chart/","text":"A j\u00e1t\u00e9k tev\u00e9kenys\u00e9gdiagrammon","title":"Activity Chart"},{"location":"activity_chart/#a-jatek-tevekenysegdiagrammon","text":"","title":"A j\u00e1t\u00e9k tev\u00e9kenys\u00e9gdiagrammon"},{"location":"class_diagram/","text":"A j\u00e1t\u00e9k oszt\u00e1lydiagrammja","title":"Class Diagram"},{"location":"class_diagram/#a-jatek-osztalydiagrammja","text":"","title":"A j\u00e1t\u00e9k oszt\u00e1lydiagrammja"},{"location":"lost_cities/","text":"Lost Cities Documentation Model Card A Card oszt\u00e1ly regy k\u00e1rty\u00e1t eprezent\u00e1l, amelynek van sz\u00edne \u00e9s \u00e9rt\u00e9ke. Source code in lost_cities/model/Card.py class Card: \"\"\" A Card oszt\u00e1ly regy k\u00e1rty\u00e1t eprezent\u00e1l, amelynek van sz\u00edne \u00e9s \u00e9rt\u00e9ke. \"\"\" def __init__(self, color: str, value: int): \"\"\" L\u00e9trehoz egy \u00faj k\u00e1rty\u00e1t a megadott sz\u00ednnel \u00e9s \u00e9rt\u00e9kkel. Args: color (str): A k\u00e1rtya sz\u00edne. value (int): A k\u00e1rtya \u00e9rt\u00e9ke. \"\"\" self._color = color self._value = value def get_color(self) -> str: \"\"\" Lek\u00e9ri a k\u00e1rtya sz\u00edn\u00e9t. Returns: str: A k\u00e1rtya sz\u00edne. \"\"\" return self._color def get_value(self) -> int: \"\"\" Lek\u00e9ri a k\u00e1rtya \u00e9rt\u00e9k\u00e9t. Returns: int: A k\u00e1rtya \u00e9rt\u00e9ke. \"\"\" return self._value __init__(color, value) L\u00e9trehoz egy \u00faj k\u00e1rty\u00e1t a megadott sz\u00ednnel \u00e9s \u00e9rt\u00e9kkel. Parameters: color ( str ) \u2013 A k\u00e1rtya sz\u00edne. value ( int ) \u2013 A k\u00e1rtya \u00e9rt\u00e9ke. Source code in lost_cities/model/Card.py def __init__(self, color: str, value: int): \"\"\" L\u00e9trehoz egy \u00faj k\u00e1rty\u00e1t a megadott sz\u00ednnel \u00e9s \u00e9rt\u00e9kkel. Args: color (str): A k\u00e1rtya sz\u00edne. value (int): A k\u00e1rtya \u00e9rt\u00e9ke. \"\"\" self._color = color self._value = value get_color() Lek\u00e9ri a k\u00e1rtya sz\u00edn\u00e9t. Returns: str ( str ) \u2013 A k\u00e1rtya sz\u00edne. Source code in lost_cities/model/Card.py def get_color(self) -> str: \"\"\" Lek\u00e9ri a k\u00e1rtya sz\u00edn\u00e9t. Returns: str: A k\u00e1rtya sz\u00edne. \"\"\" return self._color get_value() Lek\u00e9ri a k\u00e1rtya \u00e9rt\u00e9k\u00e9t. Returns: int ( int ) \u2013 A k\u00e1rtya \u00e9rt\u00e9ke. Source code in lost_cities/model/Card.py def get_value(self) -> int: \"\"\" Lek\u00e9ri a k\u00e1rtya \u00e9rt\u00e9k\u00e9t. Returns: int: A k\u00e1rtya \u00e9rt\u00e9ke. \"\"\" return self._value AbstractPile Az AbstractPile a k\u00e1rtya paklik absztrakt oszt\u00e1lya Source code in lost_cities/model/AbstractPile.py class AbstractPile: \"\"\" Az AbstractPile a k\u00e1rtya paklik absztrakt oszt\u00e1lya \"\"\" def __init__(self) -> None: \"\"\" Inicializ\u00e1lja a paklit egy \u00fcres listak\u00e9nt. \"\"\" self._cards: List[Card] = [] def is_empty(self) -> bool: \"\"\" Megvizsg\u00e1lja, hogy a pakli \u00fcres-e. Returns: bool: Igaz, ha a pakli \u00fcres. ellenkez\u0151 esetben hamis. \"\"\" return len(self._cards) == 0 def get_top_card(self) -> Card: \"\"\" Lek\u00e9ri a pakli tetej\u00e9n l\u00e9v\u0151 k\u00e1rty\u00e1t. Ha a pakli \u00fcres, akkor None-t ad vissza. Returns: Optional[Card]: A pakli tetej\u00e9n l\u00e9v\u0151 k\u00e1rtya, vagy None, ha a pakli \u00fcres. \"\"\" return self._cards.pop() __init__() Inicializ\u00e1lja a paklit egy \u00fcres listak\u00e9nt. Source code in lost_cities/model/AbstractPile.py def __init__(self) -> None: \"\"\" Inicializ\u00e1lja a paklit egy \u00fcres listak\u00e9nt. \"\"\" self._cards: List[Card] = [] get_top_card() Lek\u00e9ri a pakli tetej\u00e9n l\u00e9v\u0151 k\u00e1rty\u00e1t. Ha a pakli \u00fcres, akkor None-t ad vissza. Returns: Card \u2013 Optional[Card]: A pakli tetej\u00e9n l\u00e9v\u0151 k\u00e1rtya, vagy None, ha a pakli \u00fcres. Source code in lost_cities/model/AbstractPile.py def get_top_card(self) -> Card: \"\"\" Lek\u00e9ri a pakli tetej\u00e9n l\u00e9v\u0151 k\u00e1rty\u00e1t. Ha a pakli \u00fcres, akkor None-t ad vissza. Returns: Optional[Card]: A pakli tetej\u00e9n l\u00e9v\u0151 k\u00e1rtya, vagy None, ha a pakli \u00fcres. \"\"\" return self._cards.pop() is_empty() Megvizsg\u00e1lja, hogy a pakli \u00fcres-e. Returns: bool ( bool ) \u2013 Igaz, ha a pakli \u00fcres. ellenkez\u0151 esetben hamis. Source code in lost_cities/model/AbstractPile.py def is_empty(self) -> bool: \"\"\" Megvizsg\u00e1lja, hogy a pakli \u00fcres-e. Returns: bool: Igaz, ha a pakli \u00fcres. ellenkez\u0151 esetben hamis. \"\"\" return len(self._cards) == 0 Deck Bases: AbstractPile A pakli oszt\u00e1ly, amelyben kezdetben a j\u00e1t\u00e9k \u00f6sszes lapja tal\u00e1lhat\u00f3. Source code in lost_cities/model/Deck.py class Deck(AbstractPile): \"\"\" A pakli oszt\u00e1ly, amelyben kezdetben a j\u00e1t\u00e9k \u00f6sszes lapja tal\u00e1lhat\u00f3. \"\"\" def __init__(self): \"\"\" Inicializ\u00e1lja a paklit, felt\u00f6ltve azt a kezdeti lapokkal. \"\"\" super().__init__() self._init() def _init(self): \"\"\" Felt\u00f6lti a paklit a j\u00e1t\u00e9k kezdet\u00e9n. \"\"\" colors = [\"Red\", \"Green\", \"Blue\", \"White\", \"Yellow\"] for color in colors: for i in range(2, 11): self._cards.append(Card(color, i)) for _ in range(3): self._cards.append(Card(color, 0)) def shuffle(self): \"\"\" Megkeveri a paklit. \"\"\" random.shuffle(self._cards) __init__() Inicializ\u00e1lja a paklit, felt\u00f6ltve azt a kezdeti lapokkal. Source code in lost_cities/model/Deck.py def __init__(self): \"\"\" Inicializ\u00e1lja a paklit, felt\u00f6ltve azt a kezdeti lapokkal. \"\"\" super().__init__() self._init() shuffle() Megkeveri a paklit. Source code in lost_cities/model/Deck.py def shuffle(self): \"\"\" Megkeveri a paklit. \"\"\" random.shuffle(self._cards) Expedition Az Exped\u00edci\u00f3 oszt\u00e1ly egy adott sz\u00ednhez tartoz\u00f3 lapok sora. Source code in lost_cities/model/Expedition.py class Expedition: \"\"\" Az Exped\u00edci\u00f3 oszt\u00e1ly egy adott sz\u00ednhez tartoz\u00f3 lapok sora. \"\"\" def __init__(self, color: str): \"\"\" Inicializ\u00e1lja az exped\u00edci\u00f3t egy adott sz\u00ednnel. Args: color (str): Az exped\u00edci\u00f3 sz\u00edne. \"\"\" self._cards: List[Card] = [] self._color = color def add_card(self, card: Card): \"\"\" Hozz\u00e1ad egy lapot az exped\u00edci\u00f3hoz. Args: card (Card): A lap, melyet hozz\u00e1adunk az exped\u00edci\u00f3hoz. \"\"\" self._cards.append(card) def remove_card(self, card: Card): \"\"\" Elt\u00e1vol\u00edt egy lapot az exped\u00edci\u00f3b\u00f3l. \"\"\" self._cards.remove(card) def highest_value(self) -> int: \"\"\" Visszaadja az exped\u00edci\u00f3ban l\u00e9v\u0151 utols\u00f3 lapot, ami legmagasabb \u00e9rt\u00e9k\u0171 is egyben. Returns: int: a legnagyobb \u00e9rt\u00e9k \"\"\" if not self._cards: return 0 return self._cards[-1].get_value() def get_color(self) -> str: \"\"\" Visszaadja az exped\u00edci\u00f3 sz\u00edn\u00e9t. Returns: str: Az exped\u00edci\u00f3 sz\u00edne. \"\"\" return self._color def get_points(self) -> int: \"\"\" Kisz\u00e1m\u00edtja \u00e9s visszaadja az exped\u00edci\u00f3 pontsz\u00e1m\u00e1t. Returns: int: Az exped\u00edci\u00f3 \u00e9rt\u00e9ke pontsz\u00e1mba. \"\"\" if not self._cards: return 0 base_score = sum(map(Card.get_value, self._cards)) base_score -= 20 wager_multiplier = sum(card.get_value() == 0 for card in self._cards) + 1 base_score *= wager_multiplier if len(self._cards) >= 8: base_score += 20 return base_score def get_expedition(self): return self._cards __init__(color) Inicializ\u00e1lja az exped\u00edci\u00f3t egy adott sz\u00ednnel. Parameters: color ( str ) \u2013 Az exped\u00edci\u00f3 sz\u00edne. Source code in lost_cities/model/Expedition.py def __init__(self, color: str): \"\"\" Inicializ\u00e1lja az exped\u00edci\u00f3t egy adott sz\u00ednnel. Args: color (str): Az exped\u00edci\u00f3 sz\u00edne. \"\"\" self._cards: List[Card] = [] self._color = color add_card(card) Hozz\u00e1ad egy lapot az exped\u00edci\u00f3hoz. Parameters: card ( Card ) \u2013 A lap, melyet hozz\u00e1adunk az exped\u00edci\u00f3hoz. Source code in lost_cities/model/Expedition.py def add_card(self, card: Card): \"\"\" Hozz\u00e1ad egy lapot az exped\u00edci\u00f3hoz. Args: card (Card): A lap, melyet hozz\u00e1adunk az exped\u00edci\u00f3hoz. \"\"\" self._cards.append(card) get_color() Visszaadja az exped\u00edci\u00f3 sz\u00edn\u00e9t. Returns: str ( str ) \u2013 Az exped\u00edci\u00f3 sz\u00edne. Source code in lost_cities/model/Expedition.py def get_color(self) -> str: \"\"\" Visszaadja az exped\u00edci\u00f3 sz\u00edn\u00e9t. Returns: str: Az exped\u00edci\u00f3 sz\u00edne. \"\"\" return self._color get_points() Kisz\u00e1m\u00edtja \u00e9s visszaadja az exped\u00edci\u00f3 pontsz\u00e1m\u00e1t. Returns: int ( int ) \u2013 Az exped\u00edci\u00f3 \u00e9rt\u00e9ke pontsz\u00e1mba. Source code in lost_cities/model/Expedition.py def get_points(self) -> int: \"\"\" Kisz\u00e1m\u00edtja \u00e9s visszaadja az exped\u00edci\u00f3 pontsz\u00e1m\u00e1t. Returns: int: Az exped\u00edci\u00f3 \u00e9rt\u00e9ke pontsz\u00e1mba. \"\"\" if not self._cards: return 0 base_score = sum(map(Card.get_value, self._cards)) base_score -= 20 wager_multiplier = sum(card.get_value() == 0 for card in self._cards) + 1 base_score *= wager_multiplier if len(self._cards) >= 8: base_score += 20 return base_score highest_value() Visszaadja az exped\u00edci\u00f3ban l\u00e9v\u0151 utols\u00f3 lapot, ami legmagasabb \u00e9rt\u00e9k\u0171 is egyben. Returns: int ( int ) \u2013 a legnagyobb \u00e9rt\u00e9k Source code in lost_cities/model/Expedition.py def highest_value(self) -> int: \"\"\" Visszaadja az exped\u00edci\u00f3ban l\u00e9v\u0151 utols\u00f3 lapot, ami legmagasabb \u00e9rt\u00e9k\u0171 is egyben. Returns: int: a legnagyobb \u00e9rt\u00e9k \"\"\" if not self._cards: return 0 return self._cards[-1].get_value() remove_card(card) Elt\u00e1vol\u00edt egy lapot az exped\u00edci\u00f3b\u00f3l. Source code in lost_cities/model/Expedition.py def remove_card(self, card: Card): \"\"\" Elt\u00e1vol\u00edt egy lapot az exped\u00edci\u00f3b\u00f3l. \"\"\" self._cards.remove(card) Hand Source code in lost_cities/model/Hand.py class Hand: def __init__(self) -> None: \"\"\" K\u00e9z oszt\u00e1ly l\u00e9trehoz\u00e1sa. A k\u00e9zben l\u00e9v\u0151 lapokat t\u00e1rolja. \"\"\" self._cards: List[Card] = [] def get_hand(self) -> list: \"\"\" Visszaadja a k\u00e9zben l\u00e9v\u0151 lapokat. Returns: list: A k\u00e9zben l\u00e9v\u0151 lapok list\u00e1ja. \"\"\" return self._cards def has_color(self, color: str) -> bool: \"\"\" Megvizsg\u00e1lja, hogy a k\u00e9zben van-e adott sz\u00edn\u0171 lap. Args: color (str): A keresett lap sz\u00edne. Returns: bool: Igaz, ha van a k\u00e9zben adott sz\u00edn\u0171 lap, egy\u00e9bk\u00e9nt hamis. \"\"\" return any(card.get_color() == color for card in self._cards) def remove_card(self, card: Card): \"\"\" Elt\u00e1vol\u00edt egy lapot a k\u00e9zb\u0151l. Args: card (Card): Az elt\u00e1vol\u00edtand\u00f3 lap. \"\"\" self._cards.remove(card) def add_card(self, card: Card) -> None: \"\"\" Hozz\u00e1ad egy lapot a k\u00e9zhez. Args: card (Card): A hozz\u00e1adand\u00f3 lap. \"\"\" self._cards.append(card) __init__() K\u00e9z oszt\u00e1ly l\u00e9trehoz\u00e1sa. A k\u00e9zben l\u00e9v\u0151 lapokat t\u00e1rolja. Source code in lost_cities/model/Hand.py def __init__(self) -> None: \"\"\" K\u00e9z oszt\u00e1ly l\u00e9trehoz\u00e1sa. A k\u00e9zben l\u00e9v\u0151 lapokat t\u00e1rolja. \"\"\" self._cards: List[Card] = [] add_card(card) Hozz\u00e1ad egy lapot a k\u00e9zhez. Parameters: card ( Card ) \u2013 A hozz\u00e1adand\u00f3 lap. Source code in lost_cities/model/Hand.py def add_card(self, card: Card) -> None: \"\"\" Hozz\u00e1ad egy lapot a k\u00e9zhez. Args: card (Card): A hozz\u00e1adand\u00f3 lap. \"\"\" self._cards.append(card) get_hand() Visszaadja a k\u00e9zben l\u00e9v\u0151 lapokat. Returns: list ( list ) \u2013 A k\u00e9zben l\u00e9v\u0151 lapok list\u00e1ja. Source code in lost_cities/model/Hand.py def get_hand(self) -> list: \"\"\" Visszaadja a k\u00e9zben l\u00e9v\u0151 lapokat. Returns: list: A k\u00e9zben l\u00e9v\u0151 lapok list\u00e1ja. \"\"\" return self._cards has_color(color) Megvizsg\u00e1lja, hogy a k\u00e9zben van-e adott sz\u00edn\u0171 lap. Parameters: color ( str ) \u2013 A keresett lap sz\u00edne. Returns: bool ( bool ) \u2013 Igaz, ha van a k\u00e9zben adott sz\u00edn\u0171 lap, egy\u00e9bk\u00e9nt hamis. Source code in lost_cities/model/Hand.py def has_color(self, color: str) -> bool: \"\"\" Megvizsg\u00e1lja, hogy a k\u00e9zben van-e adott sz\u00edn\u0171 lap. Args: color (str): A keresett lap sz\u00edne. Returns: bool: Igaz, ha van a k\u00e9zben adott sz\u00edn\u0171 lap, egy\u00e9bk\u00e9nt hamis. \"\"\" return any(card.get_color() == color for card in self._cards) remove_card(card) Elt\u00e1vol\u00edt egy lapot a k\u00e9zb\u0151l. Parameters: card ( Card ) \u2013 Az elt\u00e1vol\u00edtand\u00f3 lap. Source code in lost_cities/model/Hand.py def remove_card(self, card: Card): \"\"\" Elt\u00e1vol\u00edt egy lapot a k\u00e9zb\u0151l. Args: card (Card): Az elt\u00e1vol\u00edtand\u00f3 lap. \"\"\" self._cards.remove(card) Player A j\u00e1t\u00e9kos oszt\u00e1ly. Source code in lost_cities/model/Player.py class Player: \"\"\" A j\u00e1t\u00e9kos oszt\u00e1ly. \"\"\" def __init__(self, name: str) -> None: \"\"\" J\u00e1t\u00e9kos oszt\u00e1ly l\u00e9trehoz\u00e1sa. Args: name (str): A j\u00e1t\u00e9kos neve. \"\"\" self._name = name self._hand = Hand() self._expeditions = { color: Expedition(color) for color in [\"Red\", \"Green\", \"Blue\", \"White\", \"Yellow\"] } self._points = 0 def play_card(self, card: Card, expedition: str) -> None: \"\"\" Kij\u00e1tsza a k\u00e1rty\u00e1t egy exped\u00edci\u00f3ra. Args: card (Card): A kij\u00e1tszan\u00f3 k\u00e1rtya. expedition (str): Az exped\u00edci\u00f3 sz\u00edne, ahov\u00e1 a k\u00e1rty\u00e1t ki szeretn\u00e9nk j\u00e1tszani. Raises: ValueError: Ha a j\u00e1t\u00e9kosnak nincs ilyen k\u00e1rty\u00e1ja, a k\u00e1rtya sz\u00edne nem egyezik az exped\u00edci\u00f3 sz\u00edn\u00e9vel, vagy a k\u00e1rtya \u00e9rt\u00e9ke kisebb mint az exped\u00edci\u00f3 legnagyobb k\u00e1rty\u00e1j\u00e1nak \u00e9rt\u00e9ke. \"\"\" if card in self._hand.get_hand(): if card.get_color() == expedition: if ( card.get_value() > self._expeditions[expedition].highest_value() or card.get_value() == 0 ): self._expeditions[expedition].add_card(card) self._hand.remove_card(card) else: raise ValueError(\"Small value of the card\") else: raise ValueError(\"The card color must be same as expedition color.\") else: raise ValueError(\"The player does not have this card.\") def discard_card(self, card: Card, discard_pile: DiscardPile) -> None: \"\"\" Eldobja a k\u00e1rty\u00e1t egy dob\u00f3 pakliba. Args: card (Card): Az eldoband\u00f3 k\u00e1rtya. discard_pile (DiscardPile): Az dob\u00f3 pakli, ahov\u00e1 a k\u00e1rty\u00e1t dobni szeretn\u00e9nk. Raises: ValueError: Ha a j\u00e1t\u00e9kosnak nincs ilyen k\u00e1rty\u00e1ja, vagy a k\u00e1rtya sz\u00edne nem egyezik az dob\u00f3 pakli sz\u00edn\u00e9vel. \"\"\" if card in self._hand.get_hand(): if card.get_color() == discard_pile.get_color(): discard_pile._cards.append(card) self._hand._cards.remove(card) else: raise ValueError(\"The card color must be same as discard pile color.\") else: raise ValueError(\"The player does not have this card.\") def draw_card(self, pile: AbstractPile): \"\"\" Felh\u00faz egy k\u00e1rty\u00e1t egy paklib\u00f3l. Args: pile (AbstractPile): A pakli, ahonnan fel szeretn\u00e9nk h\u00fazni a k\u00e1rty\u00e1t. Raises: ValueError: Ha a pakli \u00fcres. \"\"\" if pile.is_empty(): raise ValueError(\"The pile is empty.\") else: self._hand.add_card(pile.get_top_card()) def calc_points(self) -> None: \"\"\" Kisz\u00e1molja a j\u00e1t\u00e9kos pontjait az \u00f6sszes exped\u00edci\u00f3k a pontjai alapj\u00e1n \u00e9s hozz\u00e1adja az eddigi pontsz\u00e1mhoz. \"\"\" self._points += sum( expedition.get_points() for expedition in self._expeditions.values() ) def get_points(self) -> int: \"\"\" Visszaadja a j\u00e1t\u00e9kos pontjait. Returns: int: A j\u00e1t\u00e9kos pontjai. \"\"\" return self._points def get_expeditions(self): return self._expeditions def get_name(self): return self._name def get_hand(self): \"\"\" Lek\u00e9ri a j\u00e1t\u00e9kos aktu\u00e1lis k\u00e1rty\u00e1it a kez\u00e9ben. Returns: list: A j\u00e1t\u00e9kos kez\u00e9ben l\u00e9v\u0151 k\u00e1rty\u00e1k list\u00e1ja sz\u00f6veges form\u00e1ban. \"\"\" return [ f\"{card.get_color()} {card.get_value()}\" for card in self._hand.get_hand() ] __init__(name) J\u00e1t\u00e9kos oszt\u00e1ly l\u00e9trehoz\u00e1sa. Parameters: name ( str ) \u2013 A j\u00e1t\u00e9kos neve. Source code in lost_cities/model/Player.py def __init__(self, name: str) -> None: \"\"\" J\u00e1t\u00e9kos oszt\u00e1ly l\u00e9trehoz\u00e1sa. Args: name (str): A j\u00e1t\u00e9kos neve. \"\"\" self._name = name self._hand = Hand() self._expeditions = { color: Expedition(color) for color in [\"Red\", \"Green\", \"Blue\", \"White\", \"Yellow\"] } self._points = 0 calc_points() Kisz\u00e1molja a j\u00e1t\u00e9kos pontjait az \u00f6sszes exped\u00edci\u00f3k a pontjai alapj\u00e1n \u00e9s hozz\u00e1adja az eddigi pontsz\u00e1mhoz. Source code in lost_cities/model/Player.py def calc_points(self) -> None: \"\"\" Kisz\u00e1molja a j\u00e1t\u00e9kos pontjait az \u00f6sszes exped\u00edci\u00f3k a pontjai alapj\u00e1n \u00e9s hozz\u00e1adja az eddigi pontsz\u00e1mhoz. \"\"\" self._points += sum( expedition.get_points() for expedition in self._expeditions.values() ) discard_card(card, discard_pile) Eldobja a k\u00e1rty\u00e1t egy dob\u00f3 pakliba. Parameters: card ( Card ) \u2013 Az eldoband\u00f3 k\u00e1rtya. discard_pile ( DiscardPile ) \u2013 Az dob\u00f3 pakli, ahov\u00e1 a k\u00e1rty\u00e1t dobni szeretn\u00e9nk. Raises: ValueError \u2013 Ha a j\u00e1t\u00e9kosnak nincs ilyen k\u00e1rty\u00e1ja, vagy a k\u00e1rtya sz\u00edne nem egyezik az dob\u00f3 pakli sz\u00edn\u00e9vel. Source code in lost_cities/model/Player.py def discard_card(self, card: Card, discard_pile: DiscardPile) -> None: \"\"\" Eldobja a k\u00e1rty\u00e1t egy dob\u00f3 pakliba. Args: card (Card): Az eldoband\u00f3 k\u00e1rtya. discard_pile (DiscardPile): Az dob\u00f3 pakli, ahov\u00e1 a k\u00e1rty\u00e1t dobni szeretn\u00e9nk. Raises: ValueError: Ha a j\u00e1t\u00e9kosnak nincs ilyen k\u00e1rty\u00e1ja, vagy a k\u00e1rtya sz\u00edne nem egyezik az dob\u00f3 pakli sz\u00edn\u00e9vel. \"\"\" if card in self._hand.get_hand(): if card.get_color() == discard_pile.get_color(): discard_pile._cards.append(card) self._hand._cards.remove(card) else: raise ValueError(\"The card color must be same as discard pile color.\") else: raise ValueError(\"The player does not have this card.\") draw_card(pile) Felh\u00faz egy k\u00e1rty\u00e1t egy paklib\u00f3l. Parameters: pile ( AbstractPile ) \u2013 A pakli, ahonnan fel szeretn\u00e9nk h\u00fazni a k\u00e1rty\u00e1t. Raises: ValueError \u2013 Ha a pakli \u00fcres. Source code in lost_cities/model/Player.py def draw_card(self, pile: AbstractPile): \"\"\" Felh\u00faz egy k\u00e1rty\u00e1t egy paklib\u00f3l. Args: pile (AbstractPile): A pakli, ahonnan fel szeretn\u00e9nk h\u00fazni a k\u00e1rty\u00e1t. Raises: ValueError: Ha a pakli \u00fcres. \"\"\" if pile.is_empty(): raise ValueError(\"The pile is empty.\") else: self._hand.add_card(pile.get_top_card()) get_hand() Lek\u00e9ri a j\u00e1t\u00e9kos aktu\u00e1lis k\u00e1rty\u00e1it a kez\u00e9ben. Returns: list \u2013 A j\u00e1t\u00e9kos kez\u00e9ben l\u00e9v\u0151 k\u00e1rty\u00e1k list\u00e1ja sz\u00f6veges form\u00e1ban. Source code in lost_cities/model/Player.py def get_hand(self): \"\"\" Lek\u00e9ri a j\u00e1t\u00e9kos aktu\u00e1lis k\u00e1rty\u00e1it a kez\u00e9ben. Returns: list: A j\u00e1t\u00e9kos kez\u00e9ben l\u00e9v\u0151 k\u00e1rty\u00e1k list\u00e1ja sz\u00f6veges form\u00e1ban. \"\"\" return [ f\"{card.get_color()} {card.get_value()}\" for card in self._hand.get_hand() ] get_points() Visszaadja a j\u00e1t\u00e9kos pontjait. Returns: int ( int ) \u2013 A j\u00e1t\u00e9kos pontjai. Source code in lost_cities/model/Player.py def get_points(self) -> int: \"\"\" Visszaadja a j\u00e1t\u00e9kos pontjait. Returns: int: A j\u00e1t\u00e9kos pontjai. \"\"\" return self._points play_card(card, expedition) Kij\u00e1tsza a k\u00e1rty\u00e1t egy exped\u00edci\u00f3ra. Parameters: card ( Card ) \u2013 A kij\u00e1tszan\u00f3 k\u00e1rtya. expedition ( str ) \u2013 Az exped\u00edci\u00f3 sz\u00edne, ahov\u00e1 a k\u00e1rty\u00e1t ki szeretn\u00e9nk j\u00e1tszani. Raises: ValueError \u2013 Ha a j\u00e1t\u00e9kosnak nincs ilyen k\u00e1rty\u00e1ja, a k\u00e1rtya sz\u00edne nem egyezik az exped\u00edci\u00f3 sz\u00edn\u00e9vel, vagy a k\u00e1rtya \u00e9rt\u00e9ke kisebb mint az exped\u00edci\u00f3 legnagyobb k\u00e1rty\u00e1j\u00e1nak \u00e9rt\u00e9ke. Source code in lost_cities/model/Player.py def play_card(self, card: Card, expedition: str) -> None: \"\"\" Kij\u00e1tsza a k\u00e1rty\u00e1t egy exped\u00edci\u00f3ra. Args: card (Card): A kij\u00e1tszan\u00f3 k\u00e1rtya. expedition (str): Az exped\u00edci\u00f3 sz\u00edne, ahov\u00e1 a k\u00e1rty\u00e1t ki szeretn\u00e9nk j\u00e1tszani. Raises: ValueError: Ha a j\u00e1t\u00e9kosnak nincs ilyen k\u00e1rty\u00e1ja, a k\u00e1rtya sz\u00edne nem egyezik az exped\u00edci\u00f3 sz\u00edn\u00e9vel, vagy a k\u00e1rtya \u00e9rt\u00e9ke kisebb mint az exped\u00edci\u00f3 legnagyobb k\u00e1rty\u00e1j\u00e1nak \u00e9rt\u00e9ke. \"\"\" if card in self._hand.get_hand(): if card.get_color() == expedition: if ( card.get_value() > self._expeditions[expedition].highest_value() or card.get_value() == 0 ): self._expeditions[expedition].add_card(card) self._hand.remove_card(card) else: raise ValueError(\"Small value of the card\") else: raise ValueError(\"The card color must be same as expedition color.\") else: raise ValueError(\"The player does not have this card.\") Controller View ConsoleView A ConsoleView oszt\u00e1ly kezeli a konzolon t\u00f6rt\u00e9n\u0151 j\u00e1t\u00e9kmenetet. Source code in lost_cities/view/console_view.py class ConsoleView: \"\"\" A ConsoleView oszt\u00e1ly kezeli a konzolon t\u00f6rt\u00e9n\u0151 j\u00e1t\u00e9kmenetet. \"\"\" def __init__(self): \"\"\" \u00dcdv\u00f6zl\u0151 sz\u00f6veg. \"\"\" print(\"Welcome to Lost Cities Game!\") def get_player_names(self) -> List[str]: \"\"\" Bek\u00e9ri a j\u00e1t\u00e9kosok nev\u00e9t. Returns: List[str]: A j\u00e1t\u00e9kosok neveinek list\u00e1ja. \"\"\" player_names = [] for i in range(2): name = input(f\"Enter name for player {i+1}: \") player_names.append(name) return player_names def get_player_decision(self, hand) -> str: \"\"\" Bek\u00e9ri a felhaszn\u00e1l\u00f3tol, hogy el szeretn\u00e9-e dobni a k\u00e1rty\u00e1t (discard), vagy le szeretn\u00e9-e j\u00e1tszani (play). play: 1 discard: 0 Returns: str: A j\u00e1t\u00e9kos d\u00f6nt\u00e9se (\"discard\" vagy \"play\"). \"\"\" print(\"\\nYour hand: \" + str(hand)) while True: decision = input( \"Would you like to discard a card (0) or play a card (1)? Enter the number: \" ) if decision == \"1\": return \"play\" elif decision == \"0\": return \"discard\" else: print(\"Invalid input. Please enter either 0 (discard) or 1 (play).\") def get_card_from_hand(self, hand): \"\"\" K\u00e9ri a j\u00e1t\u00e9kost\u00f3l, hogy v\u00e1lasszon egy k\u00e1rty\u00e1t a kez\u00e9b\u0151l. Args: hand (list): A j\u00e1t\u00e9kos k\u00e1rty\u00e1inak list\u00e1ja. Returns: Card: A j\u00e1t\u00e9kos \u00e1ltal v\u00e1lasztott k\u00e1rtya. \"\"\" print(\"\\nYour hand: \" + str(hand)) while True: chosen_color = input( \"Please enter the color of the card you want to select from your hand: \" ) chosen_value = int( input( \"Please enter the value of the card you want to select from your hand: \" ) ) for card in hand: if ( card.get_color() == chosen_color and card.get_value() == chosen_value ): return card print(\"The card you selected is not in your hand. Please choose again.\") def print_board(self, piles): print(\"\\nDiscard piles:\") for color in [\"Red\", \"Green\", \"Blue\", \"White\", \"Yellow\"]: if not piles[color].is_empty(): print(color + \": top card\" + piles[color].display_top_card()) else: print(color + \": empty\") def print_expeditions(self, player): print(\"\\n\" + player.get_name() + \" expeditions:\") for color in [\"Red\", \"Green\", \"Blue\", \"White\", \"Yellow\"]: print(color + \": \" + str(player.get_expeditions()[color].get_expedition())) __init__() \u00dcdv\u00f6zl\u0151 sz\u00f6veg. Source code in lost_cities/view/console_view.py def __init__(self): \"\"\" \u00dcdv\u00f6zl\u0151 sz\u00f6veg. \"\"\" print(\"Welcome to Lost Cities Game!\") get_card_from_hand(hand) K\u00e9ri a j\u00e1t\u00e9kost\u00f3l, hogy v\u00e1lasszon egy k\u00e1rty\u00e1t a kez\u00e9b\u0151l. Parameters: hand ( list ) \u2013 A j\u00e1t\u00e9kos k\u00e1rty\u00e1inak list\u00e1ja. Returns: Card \u2013 A j\u00e1t\u00e9kos \u00e1ltal v\u00e1lasztott k\u00e1rtya. Source code in lost_cities/view/console_view.py def get_card_from_hand(self, hand): \"\"\" K\u00e9ri a j\u00e1t\u00e9kost\u00f3l, hogy v\u00e1lasszon egy k\u00e1rty\u00e1t a kez\u00e9b\u0151l. Args: hand (list): A j\u00e1t\u00e9kos k\u00e1rty\u00e1inak list\u00e1ja. Returns: Card: A j\u00e1t\u00e9kos \u00e1ltal v\u00e1lasztott k\u00e1rtya. \"\"\" print(\"\\nYour hand: \" + str(hand)) while True: chosen_color = input( \"Please enter the color of the card you want to select from your hand: \" ) chosen_value = int( input( \"Please enter the value of the card you want to select from your hand: \" ) ) for card in hand: if ( card.get_color() == chosen_color and card.get_value() == chosen_value ): return card print(\"The card you selected is not in your hand. Please choose again.\") get_player_decision(hand) Bek\u00e9ri a felhaszn\u00e1l\u00f3tol, hogy el szeretn\u00e9-e dobni a k\u00e1rty\u00e1t (discard), vagy le szeretn\u00e9-e j\u00e1tszani (play). play: 1 discard: 0 Returns: str ( str ) \u2013 A j\u00e1t\u00e9kos d\u00f6nt\u00e9se (\"discard\" vagy \"play\"). Source code in lost_cities/view/console_view.py def get_player_decision(self, hand) -> str: \"\"\" Bek\u00e9ri a felhaszn\u00e1l\u00f3tol, hogy el szeretn\u00e9-e dobni a k\u00e1rty\u00e1t (discard), vagy le szeretn\u00e9-e j\u00e1tszani (play). play: 1 discard: 0 Returns: str: A j\u00e1t\u00e9kos d\u00f6nt\u00e9se (\"discard\" vagy \"play\"). \"\"\" print(\"\\nYour hand: \" + str(hand)) while True: decision = input( \"Would you like to discard a card (0) or play a card (1)? Enter the number: \" ) if decision == \"1\": return \"play\" elif decision == \"0\": return \"discard\" else: print(\"Invalid input. Please enter either 0 (discard) or 1 (play).\") get_player_names() Bek\u00e9ri a j\u00e1t\u00e9kosok nev\u00e9t. Returns: List [ str ] \u2013 List[str]: A j\u00e1t\u00e9kosok neveinek list\u00e1ja. Source code in lost_cities/view/console_view.py def get_player_names(self) -> List[str]: \"\"\" Bek\u00e9ri a j\u00e1t\u00e9kosok nev\u00e9t. Returns: List[str]: A j\u00e1t\u00e9kosok neveinek list\u00e1ja. \"\"\" player_names = [] for i in range(2): name = input(f\"Enter name for player {i+1}: \") player_names.append(name) return player_names","title":"lost_cities"},{"location":"lost_cities/#lost-cities-documentation","text":"","title":"Lost Cities Documentation"},{"location":"lost_cities/#model","text":"","title":"Model"},{"location":"lost_cities/#lost_cities.model.Card.Card","text":"A Card oszt\u00e1ly regy k\u00e1rty\u00e1t eprezent\u00e1l, amelynek van sz\u00edne \u00e9s \u00e9rt\u00e9ke. Source code in lost_cities/model/Card.py class Card: \"\"\" A Card oszt\u00e1ly regy k\u00e1rty\u00e1t eprezent\u00e1l, amelynek van sz\u00edne \u00e9s \u00e9rt\u00e9ke. \"\"\" def __init__(self, color: str, value: int): \"\"\" L\u00e9trehoz egy \u00faj k\u00e1rty\u00e1t a megadott sz\u00ednnel \u00e9s \u00e9rt\u00e9kkel. Args: color (str): A k\u00e1rtya sz\u00edne. value (int): A k\u00e1rtya \u00e9rt\u00e9ke. \"\"\" self._color = color self._value = value def get_color(self) -> str: \"\"\" Lek\u00e9ri a k\u00e1rtya sz\u00edn\u00e9t. Returns: str: A k\u00e1rtya sz\u00edne. \"\"\" return self._color def get_value(self) -> int: \"\"\" Lek\u00e9ri a k\u00e1rtya \u00e9rt\u00e9k\u00e9t. Returns: int: A k\u00e1rtya \u00e9rt\u00e9ke. \"\"\" return self._value","title":"Card"},{"location":"lost_cities/#lost_cities.model.Card.Card.__init__","text":"L\u00e9trehoz egy \u00faj k\u00e1rty\u00e1t a megadott sz\u00ednnel \u00e9s \u00e9rt\u00e9kkel. Parameters: color ( str ) \u2013 A k\u00e1rtya sz\u00edne. value ( int ) \u2013 A k\u00e1rtya \u00e9rt\u00e9ke. Source code in lost_cities/model/Card.py def __init__(self, color: str, value: int): \"\"\" L\u00e9trehoz egy \u00faj k\u00e1rty\u00e1t a megadott sz\u00ednnel \u00e9s \u00e9rt\u00e9kkel. Args: color (str): A k\u00e1rtya sz\u00edne. value (int): A k\u00e1rtya \u00e9rt\u00e9ke. \"\"\" self._color = color self._value = value","title":"__init__()"},{"location":"lost_cities/#lost_cities.model.Card.Card.get_color","text":"Lek\u00e9ri a k\u00e1rtya sz\u00edn\u00e9t. Returns: str ( str ) \u2013 A k\u00e1rtya sz\u00edne. Source code in lost_cities/model/Card.py def get_color(self) -> str: \"\"\" Lek\u00e9ri a k\u00e1rtya sz\u00edn\u00e9t. Returns: str: A k\u00e1rtya sz\u00edne. \"\"\" return self._color","title":"get_color()"},{"location":"lost_cities/#lost_cities.model.Card.Card.get_value","text":"Lek\u00e9ri a k\u00e1rtya \u00e9rt\u00e9k\u00e9t. Returns: int ( int ) \u2013 A k\u00e1rtya \u00e9rt\u00e9ke. Source code in lost_cities/model/Card.py def get_value(self) -> int: \"\"\" Lek\u00e9ri a k\u00e1rtya \u00e9rt\u00e9k\u00e9t. Returns: int: A k\u00e1rtya \u00e9rt\u00e9ke. \"\"\" return self._value","title":"get_value()"},{"location":"lost_cities/#lost_cities.model.AbstractPile.AbstractPile","text":"Az AbstractPile a k\u00e1rtya paklik absztrakt oszt\u00e1lya Source code in lost_cities/model/AbstractPile.py class AbstractPile: \"\"\" Az AbstractPile a k\u00e1rtya paklik absztrakt oszt\u00e1lya \"\"\" def __init__(self) -> None: \"\"\" Inicializ\u00e1lja a paklit egy \u00fcres listak\u00e9nt. \"\"\" self._cards: List[Card] = [] def is_empty(self) -> bool: \"\"\" Megvizsg\u00e1lja, hogy a pakli \u00fcres-e. Returns: bool: Igaz, ha a pakli \u00fcres. ellenkez\u0151 esetben hamis. \"\"\" return len(self._cards) == 0 def get_top_card(self) -> Card: \"\"\" Lek\u00e9ri a pakli tetej\u00e9n l\u00e9v\u0151 k\u00e1rty\u00e1t. Ha a pakli \u00fcres, akkor None-t ad vissza. Returns: Optional[Card]: A pakli tetej\u00e9n l\u00e9v\u0151 k\u00e1rtya, vagy None, ha a pakli \u00fcres. \"\"\" return self._cards.pop()","title":"AbstractPile"},{"location":"lost_cities/#lost_cities.model.AbstractPile.AbstractPile.__init__","text":"Inicializ\u00e1lja a paklit egy \u00fcres listak\u00e9nt. Source code in lost_cities/model/AbstractPile.py def __init__(self) -> None: \"\"\" Inicializ\u00e1lja a paklit egy \u00fcres listak\u00e9nt. \"\"\" self._cards: List[Card] = []","title":"__init__()"},{"location":"lost_cities/#lost_cities.model.AbstractPile.AbstractPile.get_top_card","text":"Lek\u00e9ri a pakli tetej\u00e9n l\u00e9v\u0151 k\u00e1rty\u00e1t. Ha a pakli \u00fcres, akkor None-t ad vissza. Returns: Card \u2013 Optional[Card]: A pakli tetej\u00e9n l\u00e9v\u0151 k\u00e1rtya, vagy None, ha a pakli \u00fcres. Source code in lost_cities/model/AbstractPile.py def get_top_card(self) -> Card: \"\"\" Lek\u00e9ri a pakli tetej\u00e9n l\u00e9v\u0151 k\u00e1rty\u00e1t. Ha a pakli \u00fcres, akkor None-t ad vissza. Returns: Optional[Card]: A pakli tetej\u00e9n l\u00e9v\u0151 k\u00e1rtya, vagy None, ha a pakli \u00fcres. \"\"\" return self._cards.pop()","title":"get_top_card()"},{"location":"lost_cities/#lost_cities.model.AbstractPile.AbstractPile.is_empty","text":"Megvizsg\u00e1lja, hogy a pakli \u00fcres-e. Returns: bool ( bool ) \u2013 Igaz, ha a pakli \u00fcres. ellenkez\u0151 esetben hamis. Source code in lost_cities/model/AbstractPile.py def is_empty(self) -> bool: \"\"\" Megvizsg\u00e1lja, hogy a pakli \u00fcres-e. Returns: bool: Igaz, ha a pakli \u00fcres. ellenkez\u0151 esetben hamis. \"\"\" return len(self._cards) == 0","title":"is_empty()"},{"location":"lost_cities/#lost_cities.model.Deck.Deck","text":"Bases: AbstractPile A pakli oszt\u00e1ly, amelyben kezdetben a j\u00e1t\u00e9k \u00f6sszes lapja tal\u00e1lhat\u00f3. Source code in lost_cities/model/Deck.py class Deck(AbstractPile): \"\"\" A pakli oszt\u00e1ly, amelyben kezdetben a j\u00e1t\u00e9k \u00f6sszes lapja tal\u00e1lhat\u00f3. \"\"\" def __init__(self): \"\"\" Inicializ\u00e1lja a paklit, felt\u00f6ltve azt a kezdeti lapokkal. \"\"\" super().__init__() self._init() def _init(self): \"\"\" Felt\u00f6lti a paklit a j\u00e1t\u00e9k kezdet\u00e9n. \"\"\" colors = [\"Red\", \"Green\", \"Blue\", \"White\", \"Yellow\"] for color in colors: for i in range(2, 11): self._cards.append(Card(color, i)) for _ in range(3): self._cards.append(Card(color, 0)) def shuffle(self): \"\"\" Megkeveri a paklit. \"\"\" random.shuffle(self._cards)","title":"Deck"},{"location":"lost_cities/#lost_cities.model.Deck.Deck.__init__","text":"Inicializ\u00e1lja a paklit, felt\u00f6ltve azt a kezdeti lapokkal. Source code in lost_cities/model/Deck.py def __init__(self): \"\"\" Inicializ\u00e1lja a paklit, felt\u00f6ltve azt a kezdeti lapokkal. \"\"\" super().__init__() self._init()","title":"__init__()"},{"location":"lost_cities/#lost_cities.model.Deck.Deck.shuffle","text":"Megkeveri a paklit. Source code in lost_cities/model/Deck.py def shuffle(self): \"\"\" Megkeveri a paklit. \"\"\" random.shuffle(self._cards)","title":"shuffle()"},{"location":"lost_cities/#lost_cities.model.Expedition.Expedition","text":"Az Exped\u00edci\u00f3 oszt\u00e1ly egy adott sz\u00ednhez tartoz\u00f3 lapok sora. Source code in lost_cities/model/Expedition.py class Expedition: \"\"\" Az Exped\u00edci\u00f3 oszt\u00e1ly egy adott sz\u00ednhez tartoz\u00f3 lapok sora. \"\"\" def __init__(self, color: str): \"\"\" Inicializ\u00e1lja az exped\u00edci\u00f3t egy adott sz\u00ednnel. Args: color (str): Az exped\u00edci\u00f3 sz\u00edne. \"\"\" self._cards: List[Card] = [] self._color = color def add_card(self, card: Card): \"\"\" Hozz\u00e1ad egy lapot az exped\u00edci\u00f3hoz. Args: card (Card): A lap, melyet hozz\u00e1adunk az exped\u00edci\u00f3hoz. \"\"\" self._cards.append(card) def remove_card(self, card: Card): \"\"\" Elt\u00e1vol\u00edt egy lapot az exped\u00edci\u00f3b\u00f3l. \"\"\" self._cards.remove(card) def highest_value(self) -> int: \"\"\" Visszaadja az exped\u00edci\u00f3ban l\u00e9v\u0151 utols\u00f3 lapot, ami legmagasabb \u00e9rt\u00e9k\u0171 is egyben. Returns: int: a legnagyobb \u00e9rt\u00e9k \"\"\" if not self._cards: return 0 return self._cards[-1].get_value() def get_color(self) -> str: \"\"\" Visszaadja az exped\u00edci\u00f3 sz\u00edn\u00e9t. Returns: str: Az exped\u00edci\u00f3 sz\u00edne. \"\"\" return self._color def get_points(self) -> int: \"\"\" Kisz\u00e1m\u00edtja \u00e9s visszaadja az exped\u00edci\u00f3 pontsz\u00e1m\u00e1t. Returns: int: Az exped\u00edci\u00f3 \u00e9rt\u00e9ke pontsz\u00e1mba. \"\"\" if not self._cards: return 0 base_score = sum(map(Card.get_value, self._cards)) base_score -= 20 wager_multiplier = sum(card.get_value() == 0 for card in self._cards) + 1 base_score *= wager_multiplier if len(self._cards) >= 8: base_score += 20 return base_score def get_expedition(self): return self._cards","title":"Expedition"},{"location":"lost_cities/#lost_cities.model.Expedition.Expedition.__init__","text":"Inicializ\u00e1lja az exped\u00edci\u00f3t egy adott sz\u00ednnel. Parameters: color ( str ) \u2013 Az exped\u00edci\u00f3 sz\u00edne. Source code in lost_cities/model/Expedition.py def __init__(self, color: str): \"\"\" Inicializ\u00e1lja az exped\u00edci\u00f3t egy adott sz\u00ednnel. Args: color (str): Az exped\u00edci\u00f3 sz\u00edne. \"\"\" self._cards: List[Card] = [] self._color = color","title":"__init__()"},{"location":"lost_cities/#lost_cities.model.Expedition.Expedition.add_card","text":"Hozz\u00e1ad egy lapot az exped\u00edci\u00f3hoz. Parameters: card ( Card ) \u2013 A lap, melyet hozz\u00e1adunk az exped\u00edci\u00f3hoz. Source code in lost_cities/model/Expedition.py def add_card(self, card: Card): \"\"\" Hozz\u00e1ad egy lapot az exped\u00edci\u00f3hoz. Args: card (Card): A lap, melyet hozz\u00e1adunk az exped\u00edci\u00f3hoz. \"\"\" self._cards.append(card)","title":"add_card()"},{"location":"lost_cities/#lost_cities.model.Expedition.Expedition.get_color","text":"Visszaadja az exped\u00edci\u00f3 sz\u00edn\u00e9t. Returns: str ( str ) \u2013 Az exped\u00edci\u00f3 sz\u00edne. Source code in lost_cities/model/Expedition.py def get_color(self) -> str: \"\"\" Visszaadja az exped\u00edci\u00f3 sz\u00edn\u00e9t. Returns: str: Az exped\u00edci\u00f3 sz\u00edne. \"\"\" return self._color","title":"get_color()"},{"location":"lost_cities/#lost_cities.model.Expedition.Expedition.get_points","text":"Kisz\u00e1m\u00edtja \u00e9s visszaadja az exped\u00edci\u00f3 pontsz\u00e1m\u00e1t. Returns: int ( int ) \u2013 Az exped\u00edci\u00f3 \u00e9rt\u00e9ke pontsz\u00e1mba. Source code in lost_cities/model/Expedition.py def get_points(self) -> int: \"\"\" Kisz\u00e1m\u00edtja \u00e9s visszaadja az exped\u00edci\u00f3 pontsz\u00e1m\u00e1t. Returns: int: Az exped\u00edci\u00f3 \u00e9rt\u00e9ke pontsz\u00e1mba. \"\"\" if not self._cards: return 0 base_score = sum(map(Card.get_value, self._cards)) base_score -= 20 wager_multiplier = sum(card.get_value() == 0 for card in self._cards) + 1 base_score *= wager_multiplier if len(self._cards) >= 8: base_score += 20 return base_score","title":"get_points()"},{"location":"lost_cities/#lost_cities.model.Expedition.Expedition.highest_value","text":"Visszaadja az exped\u00edci\u00f3ban l\u00e9v\u0151 utols\u00f3 lapot, ami legmagasabb \u00e9rt\u00e9k\u0171 is egyben. Returns: int ( int ) \u2013 a legnagyobb \u00e9rt\u00e9k Source code in lost_cities/model/Expedition.py def highest_value(self) -> int: \"\"\" Visszaadja az exped\u00edci\u00f3ban l\u00e9v\u0151 utols\u00f3 lapot, ami legmagasabb \u00e9rt\u00e9k\u0171 is egyben. Returns: int: a legnagyobb \u00e9rt\u00e9k \"\"\" if not self._cards: return 0 return self._cards[-1].get_value()","title":"highest_value()"},{"location":"lost_cities/#lost_cities.model.Expedition.Expedition.remove_card","text":"Elt\u00e1vol\u00edt egy lapot az exped\u00edci\u00f3b\u00f3l. Source code in lost_cities/model/Expedition.py def remove_card(self, card: Card): \"\"\" Elt\u00e1vol\u00edt egy lapot az exped\u00edci\u00f3b\u00f3l. \"\"\" self._cards.remove(card)","title":"remove_card()"},{"location":"lost_cities/#lost_cities.model.Hand.Hand","text":"Source code in lost_cities/model/Hand.py class Hand: def __init__(self) -> None: \"\"\" K\u00e9z oszt\u00e1ly l\u00e9trehoz\u00e1sa. A k\u00e9zben l\u00e9v\u0151 lapokat t\u00e1rolja. \"\"\" self._cards: List[Card] = [] def get_hand(self) -> list: \"\"\" Visszaadja a k\u00e9zben l\u00e9v\u0151 lapokat. Returns: list: A k\u00e9zben l\u00e9v\u0151 lapok list\u00e1ja. \"\"\" return self._cards def has_color(self, color: str) -> bool: \"\"\" Megvizsg\u00e1lja, hogy a k\u00e9zben van-e adott sz\u00edn\u0171 lap. Args: color (str): A keresett lap sz\u00edne. Returns: bool: Igaz, ha van a k\u00e9zben adott sz\u00edn\u0171 lap, egy\u00e9bk\u00e9nt hamis. \"\"\" return any(card.get_color() == color for card in self._cards) def remove_card(self, card: Card): \"\"\" Elt\u00e1vol\u00edt egy lapot a k\u00e9zb\u0151l. Args: card (Card): Az elt\u00e1vol\u00edtand\u00f3 lap. \"\"\" self._cards.remove(card) def add_card(self, card: Card) -> None: \"\"\" Hozz\u00e1ad egy lapot a k\u00e9zhez. Args: card (Card): A hozz\u00e1adand\u00f3 lap. \"\"\" self._cards.append(card)","title":"Hand"},{"location":"lost_cities/#lost_cities.model.Hand.Hand.__init__","text":"K\u00e9z oszt\u00e1ly l\u00e9trehoz\u00e1sa. A k\u00e9zben l\u00e9v\u0151 lapokat t\u00e1rolja. Source code in lost_cities/model/Hand.py def __init__(self) -> None: \"\"\" K\u00e9z oszt\u00e1ly l\u00e9trehoz\u00e1sa. A k\u00e9zben l\u00e9v\u0151 lapokat t\u00e1rolja. \"\"\" self._cards: List[Card] = []","title":"__init__()"},{"location":"lost_cities/#lost_cities.model.Hand.Hand.add_card","text":"Hozz\u00e1ad egy lapot a k\u00e9zhez. Parameters: card ( Card ) \u2013 A hozz\u00e1adand\u00f3 lap. Source code in lost_cities/model/Hand.py def add_card(self, card: Card) -> None: \"\"\" Hozz\u00e1ad egy lapot a k\u00e9zhez. Args: card (Card): A hozz\u00e1adand\u00f3 lap. \"\"\" self._cards.append(card)","title":"add_card()"},{"location":"lost_cities/#lost_cities.model.Hand.Hand.get_hand","text":"Visszaadja a k\u00e9zben l\u00e9v\u0151 lapokat. Returns: list ( list ) \u2013 A k\u00e9zben l\u00e9v\u0151 lapok list\u00e1ja. Source code in lost_cities/model/Hand.py def get_hand(self) -> list: \"\"\" Visszaadja a k\u00e9zben l\u00e9v\u0151 lapokat. Returns: list: A k\u00e9zben l\u00e9v\u0151 lapok list\u00e1ja. \"\"\" return self._cards","title":"get_hand()"},{"location":"lost_cities/#lost_cities.model.Hand.Hand.has_color","text":"Megvizsg\u00e1lja, hogy a k\u00e9zben van-e adott sz\u00edn\u0171 lap. Parameters: color ( str ) \u2013 A keresett lap sz\u00edne. Returns: bool ( bool ) \u2013 Igaz, ha van a k\u00e9zben adott sz\u00edn\u0171 lap, egy\u00e9bk\u00e9nt hamis. Source code in lost_cities/model/Hand.py def has_color(self, color: str) -> bool: \"\"\" Megvizsg\u00e1lja, hogy a k\u00e9zben van-e adott sz\u00edn\u0171 lap. Args: color (str): A keresett lap sz\u00edne. Returns: bool: Igaz, ha van a k\u00e9zben adott sz\u00edn\u0171 lap, egy\u00e9bk\u00e9nt hamis. \"\"\" return any(card.get_color() == color for card in self._cards)","title":"has_color()"},{"location":"lost_cities/#lost_cities.model.Hand.Hand.remove_card","text":"Elt\u00e1vol\u00edt egy lapot a k\u00e9zb\u0151l. Parameters: card ( Card ) \u2013 Az elt\u00e1vol\u00edtand\u00f3 lap. Source code in lost_cities/model/Hand.py def remove_card(self, card: Card): \"\"\" Elt\u00e1vol\u00edt egy lapot a k\u00e9zb\u0151l. Args: card (Card): Az elt\u00e1vol\u00edtand\u00f3 lap. \"\"\" self._cards.remove(card)","title":"remove_card()"},{"location":"lost_cities/#lost_cities.model.Player.Player","text":"A j\u00e1t\u00e9kos oszt\u00e1ly. Source code in lost_cities/model/Player.py class Player: \"\"\" A j\u00e1t\u00e9kos oszt\u00e1ly. \"\"\" def __init__(self, name: str) -> None: \"\"\" J\u00e1t\u00e9kos oszt\u00e1ly l\u00e9trehoz\u00e1sa. Args: name (str): A j\u00e1t\u00e9kos neve. \"\"\" self._name = name self._hand = Hand() self._expeditions = { color: Expedition(color) for color in [\"Red\", \"Green\", \"Blue\", \"White\", \"Yellow\"] } self._points = 0 def play_card(self, card: Card, expedition: str) -> None: \"\"\" Kij\u00e1tsza a k\u00e1rty\u00e1t egy exped\u00edci\u00f3ra. Args: card (Card): A kij\u00e1tszan\u00f3 k\u00e1rtya. expedition (str): Az exped\u00edci\u00f3 sz\u00edne, ahov\u00e1 a k\u00e1rty\u00e1t ki szeretn\u00e9nk j\u00e1tszani. Raises: ValueError: Ha a j\u00e1t\u00e9kosnak nincs ilyen k\u00e1rty\u00e1ja, a k\u00e1rtya sz\u00edne nem egyezik az exped\u00edci\u00f3 sz\u00edn\u00e9vel, vagy a k\u00e1rtya \u00e9rt\u00e9ke kisebb mint az exped\u00edci\u00f3 legnagyobb k\u00e1rty\u00e1j\u00e1nak \u00e9rt\u00e9ke. \"\"\" if card in self._hand.get_hand(): if card.get_color() == expedition: if ( card.get_value() > self._expeditions[expedition].highest_value() or card.get_value() == 0 ): self._expeditions[expedition].add_card(card) self._hand.remove_card(card) else: raise ValueError(\"Small value of the card\") else: raise ValueError(\"The card color must be same as expedition color.\") else: raise ValueError(\"The player does not have this card.\") def discard_card(self, card: Card, discard_pile: DiscardPile) -> None: \"\"\" Eldobja a k\u00e1rty\u00e1t egy dob\u00f3 pakliba. Args: card (Card): Az eldoband\u00f3 k\u00e1rtya. discard_pile (DiscardPile): Az dob\u00f3 pakli, ahov\u00e1 a k\u00e1rty\u00e1t dobni szeretn\u00e9nk. Raises: ValueError: Ha a j\u00e1t\u00e9kosnak nincs ilyen k\u00e1rty\u00e1ja, vagy a k\u00e1rtya sz\u00edne nem egyezik az dob\u00f3 pakli sz\u00edn\u00e9vel. \"\"\" if card in self._hand.get_hand(): if card.get_color() == discard_pile.get_color(): discard_pile._cards.append(card) self._hand._cards.remove(card) else: raise ValueError(\"The card color must be same as discard pile color.\") else: raise ValueError(\"The player does not have this card.\") def draw_card(self, pile: AbstractPile): \"\"\" Felh\u00faz egy k\u00e1rty\u00e1t egy paklib\u00f3l. Args: pile (AbstractPile): A pakli, ahonnan fel szeretn\u00e9nk h\u00fazni a k\u00e1rty\u00e1t. Raises: ValueError: Ha a pakli \u00fcres. \"\"\" if pile.is_empty(): raise ValueError(\"The pile is empty.\") else: self._hand.add_card(pile.get_top_card()) def calc_points(self) -> None: \"\"\" Kisz\u00e1molja a j\u00e1t\u00e9kos pontjait az \u00f6sszes exped\u00edci\u00f3k a pontjai alapj\u00e1n \u00e9s hozz\u00e1adja az eddigi pontsz\u00e1mhoz. \"\"\" self._points += sum( expedition.get_points() for expedition in self._expeditions.values() ) def get_points(self) -> int: \"\"\" Visszaadja a j\u00e1t\u00e9kos pontjait. Returns: int: A j\u00e1t\u00e9kos pontjai. \"\"\" return self._points def get_expeditions(self): return self._expeditions def get_name(self): return self._name def get_hand(self): \"\"\" Lek\u00e9ri a j\u00e1t\u00e9kos aktu\u00e1lis k\u00e1rty\u00e1it a kez\u00e9ben. Returns: list: A j\u00e1t\u00e9kos kez\u00e9ben l\u00e9v\u0151 k\u00e1rty\u00e1k list\u00e1ja sz\u00f6veges form\u00e1ban. \"\"\" return [ f\"{card.get_color()} {card.get_value()}\" for card in self._hand.get_hand() ]","title":"Player"},{"location":"lost_cities/#lost_cities.model.Player.Player.__init__","text":"J\u00e1t\u00e9kos oszt\u00e1ly l\u00e9trehoz\u00e1sa. Parameters: name ( str ) \u2013 A j\u00e1t\u00e9kos neve. Source code in lost_cities/model/Player.py def __init__(self, name: str) -> None: \"\"\" J\u00e1t\u00e9kos oszt\u00e1ly l\u00e9trehoz\u00e1sa. Args: name (str): A j\u00e1t\u00e9kos neve. \"\"\" self._name = name self._hand = Hand() self._expeditions = { color: Expedition(color) for color in [\"Red\", \"Green\", \"Blue\", \"White\", \"Yellow\"] } self._points = 0","title":"__init__()"},{"location":"lost_cities/#lost_cities.model.Player.Player.calc_points","text":"Kisz\u00e1molja a j\u00e1t\u00e9kos pontjait az \u00f6sszes exped\u00edci\u00f3k a pontjai alapj\u00e1n \u00e9s hozz\u00e1adja az eddigi pontsz\u00e1mhoz. Source code in lost_cities/model/Player.py def calc_points(self) -> None: \"\"\" Kisz\u00e1molja a j\u00e1t\u00e9kos pontjait az \u00f6sszes exped\u00edci\u00f3k a pontjai alapj\u00e1n \u00e9s hozz\u00e1adja az eddigi pontsz\u00e1mhoz. \"\"\" self._points += sum( expedition.get_points() for expedition in self._expeditions.values() )","title":"calc_points()"},{"location":"lost_cities/#lost_cities.model.Player.Player.discard_card","text":"Eldobja a k\u00e1rty\u00e1t egy dob\u00f3 pakliba. Parameters: card ( Card ) \u2013 Az eldoband\u00f3 k\u00e1rtya. discard_pile ( DiscardPile ) \u2013 Az dob\u00f3 pakli, ahov\u00e1 a k\u00e1rty\u00e1t dobni szeretn\u00e9nk. Raises: ValueError \u2013 Ha a j\u00e1t\u00e9kosnak nincs ilyen k\u00e1rty\u00e1ja, vagy a k\u00e1rtya sz\u00edne nem egyezik az dob\u00f3 pakli sz\u00edn\u00e9vel. Source code in lost_cities/model/Player.py def discard_card(self, card: Card, discard_pile: DiscardPile) -> None: \"\"\" Eldobja a k\u00e1rty\u00e1t egy dob\u00f3 pakliba. Args: card (Card): Az eldoband\u00f3 k\u00e1rtya. discard_pile (DiscardPile): Az dob\u00f3 pakli, ahov\u00e1 a k\u00e1rty\u00e1t dobni szeretn\u00e9nk. Raises: ValueError: Ha a j\u00e1t\u00e9kosnak nincs ilyen k\u00e1rty\u00e1ja, vagy a k\u00e1rtya sz\u00edne nem egyezik az dob\u00f3 pakli sz\u00edn\u00e9vel. \"\"\" if card in self._hand.get_hand(): if card.get_color() == discard_pile.get_color(): discard_pile._cards.append(card) self._hand._cards.remove(card) else: raise ValueError(\"The card color must be same as discard pile color.\") else: raise ValueError(\"The player does not have this card.\")","title":"discard_card()"},{"location":"lost_cities/#lost_cities.model.Player.Player.draw_card","text":"Felh\u00faz egy k\u00e1rty\u00e1t egy paklib\u00f3l. Parameters: pile ( AbstractPile ) \u2013 A pakli, ahonnan fel szeretn\u00e9nk h\u00fazni a k\u00e1rty\u00e1t. Raises: ValueError \u2013 Ha a pakli \u00fcres. Source code in lost_cities/model/Player.py def draw_card(self, pile: AbstractPile): \"\"\" Felh\u00faz egy k\u00e1rty\u00e1t egy paklib\u00f3l. Args: pile (AbstractPile): A pakli, ahonnan fel szeretn\u00e9nk h\u00fazni a k\u00e1rty\u00e1t. Raises: ValueError: Ha a pakli \u00fcres. \"\"\" if pile.is_empty(): raise ValueError(\"The pile is empty.\") else: self._hand.add_card(pile.get_top_card())","title":"draw_card()"},{"location":"lost_cities/#lost_cities.model.Player.Player.get_hand","text":"Lek\u00e9ri a j\u00e1t\u00e9kos aktu\u00e1lis k\u00e1rty\u00e1it a kez\u00e9ben. Returns: list \u2013 A j\u00e1t\u00e9kos kez\u00e9ben l\u00e9v\u0151 k\u00e1rty\u00e1k list\u00e1ja sz\u00f6veges form\u00e1ban. Source code in lost_cities/model/Player.py def get_hand(self): \"\"\" Lek\u00e9ri a j\u00e1t\u00e9kos aktu\u00e1lis k\u00e1rty\u00e1it a kez\u00e9ben. Returns: list: A j\u00e1t\u00e9kos kez\u00e9ben l\u00e9v\u0151 k\u00e1rty\u00e1k list\u00e1ja sz\u00f6veges form\u00e1ban. \"\"\" return [ f\"{card.get_color()} {card.get_value()}\" for card in self._hand.get_hand() ]","title":"get_hand()"},{"location":"lost_cities/#lost_cities.model.Player.Player.get_points","text":"Visszaadja a j\u00e1t\u00e9kos pontjait. Returns: int ( int ) \u2013 A j\u00e1t\u00e9kos pontjai. Source code in lost_cities/model/Player.py def get_points(self) -> int: \"\"\" Visszaadja a j\u00e1t\u00e9kos pontjait. Returns: int: A j\u00e1t\u00e9kos pontjai. \"\"\" return self._points","title":"get_points()"},{"location":"lost_cities/#lost_cities.model.Player.Player.play_card","text":"Kij\u00e1tsza a k\u00e1rty\u00e1t egy exped\u00edci\u00f3ra. Parameters: card ( Card ) \u2013 A kij\u00e1tszan\u00f3 k\u00e1rtya. expedition ( str ) \u2013 Az exped\u00edci\u00f3 sz\u00edne, ahov\u00e1 a k\u00e1rty\u00e1t ki szeretn\u00e9nk j\u00e1tszani. Raises: ValueError \u2013 Ha a j\u00e1t\u00e9kosnak nincs ilyen k\u00e1rty\u00e1ja, a k\u00e1rtya sz\u00edne nem egyezik az exped\u00edci\u00f3 sz\u00edn\u00e9vel, vagy a k\u00e1rtya \u00e9rt\u00e9ke kisebb mint az exped\u00edci\u00f3 legnagyobb k\u00e1rty\u00e1j\u00e1nak \u00e9rt\u00e9ke. Source code in lost_cities/model/Player.py def play_card(self, card: Card, expedition: str) -> None: \"\"\" Kij\u00e1tsza a k\u00e1rty\u00e1t egy exped\u00edci\u00f3ra. Args: card (Card): A kij\u00e1tszan\u00f3 k\u00e1rtya. expedition (str): Az exped\u00edci\u00f3 sz\u00edne, ahov\u00e1 a k\u00e1rty\u00e1t ki szeretn\u00e9nk j\u00e1tszani. Raises: ValueError: Ha a j\u00e1t\u00e9kosnak nincs ilyen k\u00e1rty\u00e1ja, a k\u00e1rtya sz\u00edne nem egyezik az exped\u00edci\u00f3 sz\u00edn\u00e9vel, vagy a k\u00e1rtya \u00e9rt\u00e9ke kisebb mint az exped\u00edci\u00f3 legnagyobb k\u00e1rty\u00e1j\u00e1nak \u00e9rt\u00e9ke. \"\"\" if card in self._hand.get_hand(): if card.get_color() == expedition: if ( card.get_value() > self._expeditions[expedition].highest_value() or card.get_value() == 0 ): self._expeditions[expedition].add_card(card) self._hand.remove_card(card) else: raise ValueError(\"Small value of the card\") else: raise ValueError(\"The card color must be same as expedition color.\") else: raise ValueError(\"The player does not have this card.\")","title":"play_card()"},{"location":"lost_cities/#controller","text":"","title":"Controller"},{"location":"lost_cities/#view","text":"","title":"View"},{"location":"lost_cities/#lost_cities.view.console_view.ConsoleView","text":"A ConsoleView oszt\u00e1ly kezeli a konzolon t\u00f6rt\u00e9n\u0151 j\u00e1t\u00e9kmenetet. Source code in lost_cities/view/console_view.py class ConsoleView: \"\"\" A ConsoleView oszt\u00e1ly kezeli a konzolon t\u00f6rt\u00e9n\u0151 j\u00e1t\u00e9kmenetet. \"\"\" def __init__(self): \"\"\" \u00dcdv\u00f6zl\u0151 sz\u00f6veg. \"\"\" print(\"Welcome to Lost Cities Game!\") def get_player_names(self) -> List[str]: \"\"\" Bek\u00e9ri a j\u00e1t\u00e9kosok nev\u00e9t. Returns: List[str]: A j\u00e1t\u00e9kosok neveinek list\u00e1ja. \"\"\" player_names = [] for i in range(2): name = input(f\"Enter name for player {i+1}: \") player_names.append(name) return player_names def get_player_decision(self, hand) -> str: \"\"\" Bek\u00e9ri a felhaszn\u00e1l\u00f3tol, hogy el szeretn\u00e9-e dobni a k\u00e1rty\u00e1t (discard), vagy le szeretn\u00e9-e j\u00e1tszani (play). play: 1 discard: 0 Returns: str: A j\u00e1t\u00e9kos d\u00f6nt\u00e9se (\"discard\" vagy \"play\"). \"\"\" print(\"\\nYour hand: \" + str(hand)) while True: decision = input( \"Would you like to discard a card (0) or play a card (1)? Enter the number: \" ) if decision == \"1\": return \"play\" elif decision == \"0\": return \"discard\" else: print(\"Invalid input. Please enter either 0 (discard) or 1 (play).\") def get_card_from_hand(self, hand): \"\"\" K\u00e9ri a j\u00e1t\u00e9kost\u00f3l, hogy v\u00e1lasszon egy k\u00e1rty\u00e1t a kez\u00e9b\u0151l. Args: hand (list): A j\u00e1t\u00e9kos k\u00e1rty\u00e1inak list\u00e1ja. Returns: Card: A j\u00e1t\u00e9kos \u00e1ltal v\u00e1lasztott k\u00e1rtya. \"\"\" print(\"\\nYour hand: \" + str(hand)) while True: chosen_color = input( \"Please enter the color of the card you want to select from your hand: \" ) chosen_value = int( input( \"Please enter the value of the card you want to select from your hand: \" ) ) for card in hand: if ( card.get_color() == chosen_color and card.get_value() == chosen_value ): return card print(\"The card you selected is not in your hand. Please choose again.\") def print_board(self, piles): print(\"\\nDiscard piles:\") for color in [\"Red\", \"Green\", \"Blue\", \"White\", \"Yellow\"]: if not piles[color].is_empty(): print(color + \": top card\" + piles[color].display_top_card()) else: print(color + \": empty\") def print_expeditions(self, player): print(\"\\n\" + player.get_name() + \" expeditions:\") for color in [\"Red\", \"Green\", \"Blue\", \"White\", \"Yellow\"]: print(color + \": \" + str(player.get_expeditions()[color].get_expedition()))","title":"ConsoleView"},{"location":"lost_cities/#lost_cities.view.console_view.ConsoleView.__init__","text":"\u00dcdv\u00f6zl\u0151 sz\u00f6veg. Source code in lost_cities/view/console_view.py def __init__(self): \"\"\" \u00dcdv\u00f6zl\u0151 sz\u00f6veg. \"\"\" print(\"Welcome to Lost Cities Game!\")","title":"__init__()"},{"location":"lost_cities/#lost_cities.view.console_view.ConsoleView.get_card_from_hand","text":"K\u00e9ri a j\u00e1t\u00e9kost\u00f3l, hogy v\u00e1lasszon egy k\u00e1rty\u00e1t a kez\u00e9b\u0151l. Parameters: hand ( list ) \u2013 A j\u00e1t\u00e9kos k\u00e1rty\u00e1inak list\u00e1ja. Returns: Card \u2013 A j\u00e1t\u00e9kos \u00e1ltal v\u00e1lasztott k\u00e1rtya. Source code in lost_cities/view/console_view.py def get_card_from_hand(self, hand): \"\"\" K\u00e9ri a j\u00e1t\u00e9kost\u00f3l, hogy v\u00e1lasszon egy k\u00e1rty\u00e1t a kez\u00e9b\u0151l. Args: hand (list): A j\u00e1t\u00e9kos k\u00e1rty\u00e1inak list\u00e1ja. Returns: Card: A j\u00e1t\u00e9kos \u00e1ltal v\u00e1lasztott k\u00e1rtya. \"\"\" print(\"\\nYour hand: \" + str(hand)) while True: chosen_color = input( \"Please enter the color of the card you want to select from your hand: \" ) chosen_value = int( input( \"Please enter the value of the card you want to select from your hand: \" ) ) for card in hand: if ( card.get_color() == chosen_color and card.get_value() == chosen_value ): return card print(\"The card you selected is not in your hand. Please choose again.\")","title":"get_card_from_hand()"},{"location":"lost_cities/#lost_cities.view.console_view.ConsoleView.get_player_decision","text":"Bek\u00e9ri a felhaszn\u00e1l\u00f3tol, hogy el szeretn\u00e9-e dobni a k\u00e1rty\u00e1t (discard), vagy le szeretn\u00e9-e j\u00e1tszani (play). play: 1 discard: 0 Returns: str ( str ) \u2013 A j\u00e1t\u00e9kos d\u00f6nt\u00e9se (\"discard\" vagy \"play\"). Source code in lost_cities/view/console_view.py def get_player_decision(self, hand) -> str: \"\"\" Bek\u00e9ri a felhaszn\u00e1l\u00f3tol, hogy el szeretn\u00e9-e dobni a k\u00e1rty\u00e1t (discard), vagy le szeretn\u00e9-e j\u00e1tszani (play). play: 1 discard: 0 Returns: str: A j\u00e1t\u00e9kos d\u00f6nt\u00e9se (\"discard\" vagy \"play\"). \"\"\" print(\"\\nYour hand: \" + str(hand)) while True: decision = input( \"Would you like to discard a card (0) or play a card (1)? Enter the number: \" ) if decision == \"1\": return \"play\" elif decision == \"0\": return \"discard\" else: print(\"Invalid input. Please enter either 0 (discard) or 1 (play).\")","title":"get_player_decision()"},{"location":"lost_cities/#lost_cities.view.console_view.ConsoleView.get_player_names","text":"Bek\u00e9ri a j\u00e1t\u00e9kosok nev\u00e9t. Returns: List [ str ] \u2013 List[str]: A j\u00e1t\u00e9kosok neveinek list\u00e1ja. Source code in lost_cities/view/console_view.py def get_player_names(self) -> List[str]: \"\"\" Bek\u00e9ri a j\u00e1t\u00e9kosok nev\u00e9t. Returns: List[str]: A j\u00e1t\u00e9kosok neveinek list\u00e1ja. \"\"\" player_names = [] for i in range(2): name = input(f\"Enter name for player {i+1}: \") player_names.append(name) return player_names","title":"get_player_names()"},{"location":"activity_chart/activity_chart/","text":"graph TB Start((Start)) --> Setup[Setup Game] Setup -->|Shuffle Cards, Deal the Cards| GameLoop[Game Loop Start] GameLoop --> HasPlayableCard{Has Playable Card Of Any Color?} HasPlayableCard -- No --> DiscardCard[Discard Card] HasPlayableCard -- Yes --> PlayerDecision{Player Decision} PlayerDecision -->|Play a Card| ChooseColorAndCard[Choose Color and Card from Hand] ChooseColorAndCard --> IsCardGreater{Is Card Value Greater Than Top Card?} IsCardGreater -- No --> ChooseColorAndCard IsCardGreater -- Yes --> PlaceCard[Place Card on Pile] PlaceCard --> DrawCard{Draw Card} PlayerDecision -->|Discard a Card| DiscardCard DiscardCard --> DrawCard DrawCard -->|Draw from Deck| DrawFromDeck[Draw From Deck] DrawCard -->|Draw from Discard Pile| ChooseDiscardColor[Choose Discard Color] ChooseDiscardColor --> CanDrawFromDiscard{Can Draw From Chosen Discard Pile?} CanDrawFromDiscard -- No --> DrawCard CanDrawFromDiscard -- Yes --> DrawFromDiscard[Draw From Discard Pile] DrawFromDeck --> EndTurn[End Player's Turn] DrawFromDiscard --> EndTurn EndTurn --> Scoring[Scoring] Scoring --> IsLastCard{Is the Last Card Drawn?} IsLastCard -- No --> PlayerSwitch PlayerSwitch --> GameLoop[Game Loop Start] IsLastCard -- Yes --> IsFinalRound{Is this the Final Round?} IsFinalRound -- No --> Setup IsFinalRound -- Yes --> FinalScoring[Final Scoring] FinalScoring --> End((End))","title":"Activity chart"},{"location":"class_diagram/class_diagram/","text":"classDiagram Game --o \"2\" Player Game --o \"1\" Deck Game --o \"5\" DiscardPile Player --o \"1\" Hand Player --o \"5\" Expedition Expedition *-- \"*\" Card AbstractPile *-- \"*\" Card AbstractPile <|-- Deck AbstractPile <|-- DiscardPile class Game{ #players #deck #discardPiles #currentPlayer #currentTurn +start() +end() : dict +turn(Player, dict) +isGameOver() : bool } class Player{ #name #hand #expeditions #points +playCard(Card) +discardCard(Card, DiscardPile) +drawCard(AbstractPile) +calcPoints() +getPoints() } class AbstractPile{ #cards +drawCard() : Card +isEmpty() : bool } class Card{ #color #value +getColor() : str +getValue() : int } class Deck{ +_init() +shuffle() } class DiscardPile{ #color +getColor() : str +addCard(Card) +displayTopCard() } class Hand{ #cards +getHand() : List[Card] +hasColor(string) : bool +removeCard(Card) +addCard(Card) } class Expedition{ #cards #color +addCard(Card) +getAllCards() : list[Card] +highestValue() : int +getColor() : str +getPoints() : int }","title":"Class diagram"},{"location":"class_diagram/old_class_diagram_plan/","text":"Game init variables players table decks use cases create players, deck game flow Player init variables name points hand_cards use cases get name, points, hand_cards set name, points add card play_card_to_expeditions Card init variables value color type use cases get value, color, type Deck init variables cards use cases shuffle get_a_card Table init variables expeditions (keys = colors, values = cards) use cases add_card_to_expedition calculate_expedition_points get_expeditions","title":"Game"},{"location":"class_diagram/old_class_diagram_plan/#game","text":"","title":"Game"},{"location":"class_diagram/old_class_diagram_plan/#init-variables","text":"players table decks","title":"init variables"},{"location":"class_diagram/old_class_diagram_plan/#use-cases","text":"create players, deck game flow","title":"use cases"},{"location":"class_diagram/old_class_diagram_plan/#player","text":"","title":"Player"},{"location":"class_diagram/old_class_diagram_plan/#init-variables_1","text":"name points hand_cards","title":"init variables"},{"location":"class_diagram/old_class_diagram_plan/#use-cases_1","text":"get name, points, hand_cards set name, points add card play_card_to_expeditions","title":"use cases"},{"location":"class_diagram/old_class_diagram_plan/#card","text":"","title":"Card"},{"location":"class_diagram/old_class_diagram_plan/#init-variables_2","text":"value color type","title":"init variables"},{"location":"class_diagram/old_class_diagram_plan/#use-cases_2","text":"get value, color, type","title":"use cases"},{"location":"class_diagram/old_class_diagram_plan/#deck","text":"","title":"Deck"},{"location":"class_diagram/old_class_diagram_plan/#init-variables_3","text":"cards","title":"init variables"},{"location":"class_diagram/old_class_diagram_plan/#use-cases_3","text":"shuffle get_a_card","title":"use cases"},{"location":"class_diagram/old_class_diagram_plan/#table","text":"","title":"Table"},{"location":"class_diagram/old_class_diagram_plan/#init-variables_4","text":"expeditions (keys = colors, values = cards)","title":"init variables"},{"location":"class_diagram/old_class_diagram_plan/#use-cases_4","text":"add_card_to_expedition calculate_expedition_points get_expeditions","title":"use cases"}]}